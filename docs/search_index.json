[["index.html", "Quantitative Reasoning for Ecosystem Science 1 Introduction Set up Instructions Navigating this site", " Quantitative Reasoning for Ecosystem Science Caitlin C. Mothes, PhD 2023-01-30 1 Introduction This site hosts the lab curriculum for Colorado State University’s ESS 330 course: Quantitative Reasoning for Ecosystem Science Set up Instructions Before getting started with the first lesson, please follow the instructions on the R Setup to make sure you have all the necessary software installed on your computer. Navigating this site The table of contents on the left allows you to navigate to the lesson for each week of the course. Each lesson will walk you through working through the topic, analysis, etc. for that week with exercises at the end of the lesson that will be that week’s homework assignment. Homework will be submitted through Canvas and exercise questions (including any code, figures, etc.) must be submitted in Word or PDF format. The Intro to R lesson will walk through how to create R Markdown documents in R, which you will use to write your code/answers to the exercises and then render to either Word or PDF report which is what you will submit through Canvas. "],["setup-instructions.html", " 2 Setup Instructions 2.1 Install R and RStudio 2.2 Package Installation", " 2 Setup Instructions This tutorial walks you through all the required setup instructions to use R and RStudio for this course. If you have any issues, please email your TA or attend office hours for assistance. 2.1 Install R and RStudio R is an open source language and software environment for statistical analysis and graphics (plus so much more!). You must first download the R software (for free) here: https://www.r-project.org/. Click the download link based on your operating system (OS). Then, for Mac users, install the latest release based on your macOS. For Windows users, click the ‘install R for the first time’ link. Note: If you already have R installed, you must have at least version 4.0.0. or greater, but it is best to have the most recent version installed (4.2.2) RStudio is a (also free) R Integrated Development Environment (IDE) that provides a built-in editor and other advantages such as version control and project management. Once you have the R software installed on your computer, you can install RStudio Desktop here: https://posit.co/download/rstudio-desktop/. Under Step 2 click the download RStudio Desktop button. 2.2 Package Installation While the R software comes with many pre-loaded functions (referred to as ‘base R’ functions) to perform various operations in R, there are thousands of R packages that provide additional reusable R functions. In order to use these functions you need to first install the package to your local machine using the install.packages() function. Once a package is installed on your computer you don’t need to install it again (but you may have to update it). Anytime you want to use the package in a new R session you can load it with the library() function. We will be working in RStudio this entire course, so after you have installed both R and RStudio, open a new session of RStudio. You will learn more about the ins and outs of RStudio in lab, but for set up purposes you will just be running code in the Console. Normally you want to save the code you write, but since package installation is only needed once (unless you are working on a new machine or need to update any packages) you can execute this directly in the console. Run the following three lines of code (one at a time) in the console. You can click the copy button in the upper right corner when you hover over the code chunk, then paste that after the &gt; in the Console. Spelling is important! Install the tidyverse package. The Tidyverse is actually a collection of multiple R packages designed for data manipulation, exploration, and visualization that you are likely to use in every day data analysis. When you install the Tidyverse, it installs all of these packages, and you can later load all of them in your R session with library(tidyverse). Since you are installing multiple packages here this may take a little while. install.packages(&quot;tidyverse&quot;) Install the palmerpenguins package. This is a data package that installs a couple of spreadsheets you can load and work with in R. install.packages(&quot;palmerpenguins&quot;) Install the rmarkdown package. Later on in the course and for your final projects you will be working in and rendering R Markdown files and reports. R Markdown is a notebook style interface integrating text and code, allowing you to create fully reproducible documents and render them to various elegantly formatted static or dynamic outputs. You can learn more about R Markdown at their website, which has really informative lessons on their Getting Started page, and see the range of outputs you can create at their Gallery page. install.packages(&quot;rmarkdown&quot;) To see if you successfully installed all three packages, use the library() function to load the packages into your session. You should either see nothing printed to the console after running library(), or in the case of the tidyverse you may see some messages printed. As long as there are no error messages, you should be all set! If you do get any error messages, please email you TA or attend office hours for assistance. library(tidyverse) library(palmerpenguins) library(rmarkdown) "],["introduction-to-r-and-rstudio.html", " 3 Introduction to R and RStudio 3.1 Getting to know RStudio 3.2 R Projects 3.3 Write your first script", " 3 Introduction to R and RStudio 3.1 Getting to know RStudio When you first open RStudio, it is split into 3 panels: The Console (left), where you can directly type and run code (by hitting Enter) The Environment/History pane (upper-right), where you can view the objects you currently have stored in your environment and a history of the code you’ve run The Files/Plots/Packages/Help pane (lower-right), where you can search for files, view and save your plots, view and manage what packages are loaded in your library and session, and get R help Image Credit: Software Carpentry To write and save code you use scripts. You can open a new script with File -&gt; New File -&gt; R Script or by clicking the icon with the green plus sign in the upper left corner under ‘File’. When you open a script, RStudio then opens a fourth ‘Source’ panel in the upper-left to write and save your code. You can also send code from a script directly to the console to execute it by highlighting the entire code line/chunk (or place your cursor at the very end of the code chunk) and hit CTRL+ENTER on a PC or CMD+ENTER on a Mac. Image Credit: Software Carpentry It is good practice to add comments/notes throughout your scripts to document what the code is doing. To do this start your text with a #. R knows to ignore everything after a #, so you can write whatever you want there. Note that R reads line by line, so if you want your comments to carry over multiple lines you need a # at every line. 3.2 R Projects As a first step whenever you start a new project, workflow, analysis, etc., it is good practice to set up an R project. R Projects are RStudio’s way of bundling together all your files for a specific project, such as data, scripts, results, figures. Your project directory also becomes your working directory, so everything is self-contained and easily portable. We recommend using a single R Project for this course, so lets create one now. You can start an R project in an existing directory or in a new one. To create a project go to File -&gt; New Project: Let’s choose ‘New Directory’ then ‘New Project’. Now choose a directory name, this will be both the folder name and the project name, so use proper spelling conventions (no spaces!). We recommend naming it something course specific, like ‘ESS-330-2023’. Choose where on your local file system you want to save this new folder/project, then click ‘Create Project’. Now you can see your RStudio session is working in the R project you just created. You can see the working directory printed at the top of your console is now the project directory, and in the ‘Files’ tab in RStudio you can see there is an .Rproj file with the same name as the R project, which will open up this R project in RStudio whenever you come back to it. Test out how this .Rproj file works. Close out of your R session, navigate to the project folder on your computer, and double-click the .Rproj file. What is a working directory? A working directory is the default file path to a specific file location on your computer to read files from or save files to. Since everyone’s computer is unique, everyone’s full file paths will be different. This is an advantage of working in R Projects, you can use relative file paths, since the working directory defaults to wherever the .RProj file is saved on your computer you don’t need to specify the full unique path to read and write files within the project directory. 3.3 Write your first script Let’s start coding! The first thing you do in a fresh R session and at the beginning of a workfow is set up your environment, which mostly includes installing and loading necessary libraries and reading in required data sets. Let’s open a fresh R script and save it in our root (project) directory. Call this script something like ‘r-intro.R’. 3.3.1 Commenting code It is best practice to add comments throughout your code noting what you are doing at each step. This is helpful for both future you (say you forgot what a chunk of code is doing after returning to it months later) and for others you may share your code with. To comment out code you use a #. You can use as many #’s as you want, any thing you write on that line after at least one # will be read as a comment and R will know to ignore that and not try to execute it as code. At the top of your script, write some details about the script like a title, your name and date. # Introduction to R and RStudio # your name # date Now for the rest of this lesson, write all the code in this script you just created. You can execute code from a script (i.e., send it from the script to the console) in various ways (see below). Think of these scripts as your code notes, you can write and execute code, add notes throughout, and then save it and come back to it whenever you want. 3.3.2 Executing code Almost always you will start a script by installing and/or loading all the libraries/packages you need for that workflow. Add the following lines of code to your script to import our R packages you should have already installed from the R Setup page. #load necessary libraries library(tidyverse) library(palmerpenguins) To execute code you can either highlight the entire line(s) of code you want to run and click the ‘Run’ button in the upper-right of the Source pane or use the keyboard shortcut CTRL+Enter on Windows or CMD+Enter on Macs. You can also place your cursor at the very end of the line or chunk of code you want to run and hit CTRL+Enter or CMD+Enter. All functions and other code chunks must properly close all parentheses or brackets to execute. If you have an un-closed parentheses/bracket you will get stuck in a never ending loop and will keep seeing + printed in the console. To get out of this loop you can either close the parentheses or bracket, or hit ESC to start over. You want to make sure you see the &gt; in the console and not the + to execute code. 3.3.3 Getting help with code Take advantage of the ‘Help’ pane in RStudio! There you can search packages and specific functions to see all the available and required arguments, along with the default argument settings and some code examples. You can also execute a help search from the console with a ?. For example: ?mean 3.3.4 Functions R has many built in functions to perform various tasks. To run these functions you type the function name followed by parentheses. Within the parentheses you put in your specific arguments needed to run the function. Practice running these various functions and see what output is printed in the console. # mathematical functions with numbers log(10) # average a range of numbers mean(1:5) # nested functions for a string of numbers, using the concatenate function &#39;c&#39; mean(c(1,2,3,4,5)) # functions with characters print(&quot;Hello World&quot;) paste(&quot;Hello&quot;, &quot;World&quot;, sep = &quot;-&quot;) 3.3.4.1 Assignment operator Notice that when you ran the following functions above, the answers were printed to the console, but were not saved anywhere (i.e., you don’t see them stored as variables in your environment). To save the output of some operation to your environment you use the assignment operator &lt;-. For example, run the following line of code: x &lt;- log(10) And now you see the output, ‘2.3025…’ saved as a variable named ‘x’. You can now use this value in other functions x + 5 3.3.4.2 Base R vs. The Tidyverse You may hear the terms ‘Base R’ and ‘Tidyverse’ a lot throughout this course. Base R includes functions that are installed with the R software and do not require the installation of additional packages to use them. The Tidyverse is a collection of R packages designed for data manipulation, exploration, and visualization that you are likely to use in every day data analysis, and all use the same design philosophy, grammar, and data structures. When you install the Tidyverse, it installs all of these packages, and you can then load all of them in your R session with library(tidyverse). Base R and Tidyverse have many similar functions, but many prefer the style, efficiency and functionality of the Tidyverse packages, and we will mostly be sticking to Tidyverse functions for this course. 3.3.5 Data Types For this intro lesson, we are going to use the Palmer Penguins data set (which is loaded with the palmerpenguins package you installed during setup). This data was collected and made available by Dr. Kristen Gorman and the Palmer Station, Antarctica LTER, a member of the Long Term Ecological Research Network. Load the penguins data set. data(&quot;penguins&quot;) You now see it in the Environment pane. Print it to the console to see a snapshot of the data: penguins This data is structured is a data frame, probably the most common data type and one you are most familiar with. These are like the spreadsheets you worked with in the first lesson, tabular data organized by rows and columns. However we see at the top this is called a tibble which is just a fancy kind of data frame specific to the tidyvese. At the top we can see the data type of each column. There are five main data types: character: \"a\", \"swc\" numeric: 2, 15.5 integer: 2L (the L tells R to store this as an integer, otherwise integers can also be numeric data types) logical: TRUE, FALSE complex: 1+4i (complex numbers with real and imaginary parts) Data types are combined to form data structures. R’s basic data structures include atomic vector list matrix data frame factors You can see the data type or structure of an object using the class() function, and get more specific details using the str() function. (Note that ‘tbl’ stands for tibble). class(penguins) str(penguins) class(penguins$species) str(penguins$species) When we pull one column from a data frame, like we just did above with the $ operator, that returns a vector. Vectors are 1-dimensional, and must contain data of a single data type (i.e., you cannot have a vector of both numbers and characters). If you want a 1-dimensional object that holds mixed data types and structures, that would be a list. You can put together pretty much anything in a list. myList &lt;- list(&quot;apple&quot;, 1993, FALSE, penguins) str(myList) You can even nest lists within lists list(myList, list(&quot;more stuff here&quot;, list(&quot;and more&quot;))) You can use the names() function to retrieve or assign names to list and vector elements names(myList) &lt;- c(&quot;fruit&quot;, &quot;year&quot;, &quot;logic&quot;, &quot;data&quot;) names(myList) 3.3.6 Indexing Indexing is an extremely important aspect to data exploration and manipulation. In fact you already started indexing when we looked at the data type of individual columns with penguins$species. How you index is dependent on the data structure. Index lists: # for lists we use double brackes [[]] myList[[1]] myList[[&quot;data&quot;]] Index vectors: # for vectors we use single brackets [] myVector &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;) myVector[2] Index data frames: # dataframe[row(s), columns()] penguins[1:5, 2] penguins[1:5, &quot;island&quot;] penguins[1, 1:5] penguins[1:5, c(&quot;species&quot;,&quot;sex&quot;)] penguins[penguins$sex==&#39;female&#39;,] # $ for a single column penguins$species 3.3.7 Read and Write Data We used an R data package today to read in our data frame, but that probably isn’t how you will normally read in your data. There are many ways to read and write data in R. To read in .csv files, you can use read_csv() which is included in the Tidyverse with the readr package, and to save csv files use write_csv(). The readxl package is great for reading in excel files, however it is not included in the Tidyverse and will need to be loaded separately. Find the .csv you created at the end of last week’s lesson. Created a folder in your project directory called ‘data/’ and copy the .csv file there. You will store various data sets in this ‘data/’ folder throughout the course. Say your .csv is called ‘survey_data_clean.csv’. This is how you would read it in to R, giving it the object name ‘survey_data’ survey_data &lt;- read_csv(&quot;data/survey_data_clean.csv&quot;) 3.3.8 Exercises For each question you must also include the line(s) of code you used to arrive at the answer. Use class() and str() to inspect the .csv you created from last week’s lesson that you just read into R. How many rows and columns does it have? What data type is each column? (4 pts) Why don’t the following lines of code work? Tweak each one so the code runs (6 pts) myList[&quot;Fruit&quot;] penguins$flipper_lenght_mm penguins[island==&#39;Dream&#39;,] How many species are in the penguins dataset? What islands were the data collected for? (Note: the unique() function might help) (5 pts) Use indexing to create a new data frame that has only 3 columns: species, island and flipper length columns, and subset all rows for just the ‘Dream’ island. (5 pts) Use indexing and the mean() function to find the average flipper length for the Adelie species on Dream island. (5 pts) "],["exploratory-data-analysis.html", " 4 Exploratory Data Analysis 4.1 Data wrangling 4.2 Visualization", " 4 Exploratory Data Analysis For this lesson you will be working with the same penguins data from last week. Start a new script for this week, and add/execute the following lines of code to set up your session: library(tidyverse) library(palmerpenguins) data(&quot;penguins&quot;) When working with a new data set, often the first thing you do is perform some initial investigations on the data using various summary statistics and graphical representations. This is exploratory data analysis! Or for short, EDA. EDA is used to help form initial hypotheses of your data that you can then test with statistics. For our penguins data, we want to start by exploring things like sample size, variation and distribution of our variables, and comparisons among species, islands, and sex. A new Base R function we have yet to use is summary(). This functions gives us a very quick snapshot of each variable in our dataset, where we can see things like sample size and summary statistics. summary(penguins) For some more in depth EDA, the tidyverse packages provide many useful functions to summarize and visualize data. Today we are going to simultaneously learn about various functions of tidyverse packages while investigating and formulating hypotheses about our penguins data set. 4.1 Data wrangling 4.1.1 The dplyr package dplyr is a Tidyverse package to handle most of your data exploration and manipulation tasks. Now that you have learned indexing in the Intro to R lesson, you may notice the first two dplyr functions we are going to learn, filter() and select() act as indexing functions, subsetting rows and columns based on specified names and/or conditions. Subset rows with filter() You can filter data in many ways using logical operators (&gt;, &gt;=, &lt;, &lt;=, != (not equal), and == (equal)), AND (&amp;), OR (|), and NOT (!) operators, and other operations such as %in%, which returns everything that matches at least one of the values in a given vector, and is.na() and !is.na() to return all missing or all non-missing data. # filter rows for just the Adelie species filter(penguins, species == &quot;Adelie&quot;) # filter rows for all species EXCEPT Adelie filter(penguins, species != &quot;Adelie&quot;) # filter islands Dream and Torgersen AND rows that DO NOT have missing values for bill length filter(penguins, island %in% c(&quot;Dream&quot;, &quot;Torgersen&quot;) &amp; !is.na(bill_length_mm)) Note: Tidyverse package functions take in column names without quotations. Using dplyr functions will not manipulate the original data, so if you want to save the returned object you need to assign it to a new variable. body_mass_filtered &lt;- filter(penguins, body_mass_g &gt; 4750 | body_mass_g &lt; 3550) Subset columns with select() select() has many helper functions you can use with it, such as starts_with(), ends_with(), contains() and many more that are very useful when dealing with large data sets. See ?select for more details # Select two specific variables select(penguins, species, sex) # Select a range of variables select(penguins, species:flipper_length_mm) # Rename columns within select select(penguins, genus = species, island) # Select column variables that have &#39;mm&#39; in their name select(penguins, contains(&quot;mm&quot;)) Create new variables with mutate() # New variable that calculates bill length in cm mutate(penguins, bill_length_cm = bill_length_mm/10) # mutate based on conditional statements mutate(penguins, species_sex = if_else(sex == &#39;male&#39;, paste0(species,&quot;_m&quot;), paste0(species, &quot;_f&quot;))) Notice the use of paste0() here, and when we briefly used a similar function paste() in previous lessons. Explore the difference between these two. They are both very useful functions for pasting strings together. group_by() and summarise() All the above functions can all be used in conjunction with group_by(), which changes the scope of each function from operating on the entire data set to operating on it group-by-group. group_by() becomes even more powerful when used along with summarise() to calculate some specified summary statistic for each group. However, before we start using multiple operations in conjunction with one another, we need to talk about the pipe operator %&gt;%. 4.1.1.1 The pipe %&gt;% The pipe, %&gt;%, comes from the magrittr package by Stefan Milton Bache. Packages in the tidyverse load %&gt;% for you automatically, so you don’t usually load magrittr explicitly. Pipes are a powerful tool for clearly expressing a sequence of multiple operations. For example, the pipe operator can take this sequence of operations: df1 &lt;- filter(penguins, island == &quot;Dream&quot;) df2 &lt;- mutate(df1, flipper_length_cm = flipper_length_mm/10) df3 &lt;- select(df2, species, year, flipper_length_cm) print(df3) And turn it into this, removing the need to create intermediate variables penguins %&gt;% filter(island == &quot;Dream&quot;) %&gt;% mutate(flipper_length_cm = flipper_length_mm/10) %&gt;% select(species, year, flipper_length_cm) You can read it as a series of imperative statements: filter, then mutate, then select. A good way to pronounce %&gt;% when reading code is “then”. It takes the output of the operation to the left of %&gt;% and feeds it into the next function as the input. So now back to group_by() and summarize(). Say you want to summarize data by some specified group, for example you want to find the average body mass for each species, this is how you could do that: penguins %&gt;% group_by(species) %&gt;% summarise(body_mass_avg = mean(body_mass_g, na.rm = TRUE)) You can also group by multiple variables. Say you want to calculate the sample size for each species for each year of the study. penguins %&gt;% group_by(species, year) %&gt;% summarise(n_observations = n()) 4.2 Visualization An important part of data exploration includes visualizing the data to reveal patterns you can’t necessarily see from viewing a data frame of numbers. Here we are going to walk through a very quick introduction to ggplot2, using some code examples from the palmerpenguins R package tutorial: https://allisonhorst.github.io/palmerpenguins/articles/intro.html. ggplot2 is perhaps the most popular data visualization package in the R language, and is also a part of the Tidyverse. One big difference about ggplot though is that it does not use the pipe %&gt;% operator like we just learned, but instead threads together arguments with + signs (but you can pipe a data frame into the first ggplot() argument). The general structure for ggplots follows the template below. Note that you can also specify the aes() parameters within ggplot() instead of your geom function, which you may see a lot of people do. The mappings include arguments such as the x and y variables from your data you want to use for the plot. The geom function is the type of plot you want to make, such as geom_point(), geom_bar(), etc, there are a lot to choose from. # general structure of ggplot functions ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) Visualize variable distributions with geom_historgram() If you plan on doing any statistical analysis on your data , one of the first things you are likely to do is explore the distribution of your variables. You can plot histograms with geom_histogram() ggplot(penguins) + geom_histogram(mapping = aes(x = flipper_length_mm)) This tells us there may be a lot of variation in flipper size among species. We can use the ‘fill =’ argument to color the bars by species, and scale_fill_manual() to specify the colors. # Histogram example: flipper length by species ggplot(penguins) + geom_histogram(aes(x = flipper_length_mm, fill = species), alpha = 0.5, position = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;darkorchid&quot;,&quot;cyan4&quot;)) Cool, now we can see there seems to be some pretty clear variation in flipper size among species. Another way to visualize across groups is with facet_wrap(), which will create a separate plot for each group, in this case species. ggplot(penguins) + geom_histogram(aes(x = flipper_length_mm, fill = species), alpha = 0.5, position = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;darkorchid&quot;,&quot;cyan4&quot;)) + facet_wrap(~species) Compare sample sizes with geom_bar() We saw a quick snapshot of total sample size for each species with summary(). Let’s use ggplot to see sample size for each species on each island. ggplot(penguins) + geom_bar(mapping = aes(x = island, fill = species)) As you may have already noticed, the beauty about ggplot2 is there are a million ways you can customize your plots. This example builds on our simple bar plot: ggplot(penguins, aes(x = island, fill = species)) + geom_bar(alpha = 0.8) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;purple&quot;,&quot;cyan4&quot;), guide = FALSE) + theme_minimal() + facet_wrap(~species, ncol = 1) + coord_flip() This is important information, since we know now that not all species were sampled on every island, which will have complications for any comparisons we may want to make among islands. Visualize variable relationships with geom_point() We can use geom_point() to view the relationship between two variables by specifying the x and y axes. Say we want o visualize the relationship between penguin body mass and flipper length and color the point by species: ggplot(penguins) + geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species)) 4.2.1 Exercises Reorder the variables in penguins so that year is the first column followed by the rest (Hint: look into the use of everything()). Create a new column called ‘size_group’ where individuals with body mass greater than the overall average are called ‘large’ and those smaller are called ‘small’. Find out which year for each species were individuals on average the largest according to body mass. You want to filter data for years that are not in a vector of given years, but this code doesn’t work. Tweak it so that it does. (Yes, you could just filter year to equal 2007 in this case but there is a trouble-shooting lessons here). penguins %&gt;% filter(year !%in% c(2008, 2009)) Using the visualization techniques you learned today, create a figure that allows you to visualize some comparison of your choice among the penguins data set. From this figure, develop a testable hypothesis about the data and the patterns you see. "],["univariate-statistics.html", " 5 Univariate Statistics 5.1 t-test 5.2 Regression 5.3 Chi-square", " 5 Univariate Statistics 5.1 t-test 5.2 Regression 5.3 Chi-square "],["multivariate-statistics.html", " 6 Multivariate Statistics 6.1 ANOVA 6.2 Multiple Regression 6.3 Model Selection", " 6 Multivariate Statistics 6.1 ANOVA 6.2 Multiple Regression 6.3 Model Selection "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
