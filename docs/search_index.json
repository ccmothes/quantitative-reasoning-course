[["exploratory-data-analysis.html", " 4 Exploratory Data Analysis 4.1 Data wrangling 4.2 Visualize", " 4 Exploratory Data Analysis For this lesson you will be working with the same penguins data from last week. Start a new script for this week, and add/execute the following lines of code to set up your session: library(tidyverse) library(palmerpenguins) data(&quot;penguins&quot;) When working with a new data set, often the first thing you do is perform some initial investigations on the data using various summary statistics and graphical representations. This is exploratory data analysis! Or for short, EDA. EDA is used to help form initial hypotheses of your data that you can then test with statistics. For our penguins data, we want to start by exploring things like sample size, variation and distribution of our variables, and comparisons among species, islands, and sex. A new Base R function we have yet to use is summary(). This functions gives us a very quick snapshot of each variable in our dataset, where we can see things like sample size and summary statistics. summary(penguins) For some more in depth EDA, the tidyverse packages provide many useful functions to summarize and visualize data. Today we are going to simultaneously learn about various functions of tidyverse packages while investigating and formulating hypotheses about our penguins data set. 4.1 Data wrangling 4.1.1 The dplyr package dplyr is a Tidyverse package to handle most of your data exploration and manipulation tasks. Note: Tidyverse package functions take in column names without quotations.** Subset rows with filter() You can filter data in many ways using logical operators (&gt;, &gt;=, &lt;, &lt;=, != (not equal), and == (equal)), AND (&amp;), OR (|), and NOT (!) operators, and other operations such as %in%, which returns everything that matches at least one of the values in a given vector, and is.na() and !is.na() to return all missing or all non-missing data. filter(penguins, species == &quot;Adelie&quot;) filter(penguins, species != &quot;Adelie&quot;) filter(penguins, island %in% c(&quot;Dream&quot;, &quot;Torgersen&quot;) &amp; !is.na(bill_length_mm)) Using dplyr functions will not manipulate the original data, so if you want to save the returned object you need to assign it to a new variable. Select variables by their column names with select() select() has many helper functions you can use with it, such as starts_with(), ends_with(), contains() and many more that are very useful when dealing with large data sets. See ?select for more details # Select two specific variables select(penguins, species, sex) # Select a range of variables select(penguins, species:flipper_length_mm) # Rename columns within select select(penguins, genus = species, island) # Select column variables that are recorded in mm select(penguins, contains(&quot;mm&quot;)) Create new variables with mutate() # New variable that calculates bill length in cm mutate(penguins, bill_length_cm = bill_length_mm/10) # mutate based on conditional statements mutate(penguins, species_sex = if_else(sex == &#39;male&#39;, paste0(species,&quot;_m&quot;), paste0(species, &quot;_f&quot;))) group_by() and summarise() These can all be used in conjunction with group_by() which changes the scope of each function from operating on the entire dataset to operating on it group-by-group. group_by() becomes even more powerful when used along with summarise(). However before we start using multiple operations in conjunction with one another, we need to talk about the pipe operator %&gt;%. 4.1.1.1 The pipe %&gt;% The pipe, %&gt;%, comes from the magrittr package by Stefan Milton Bache. Packages in the tidyverse load %&gt;% for you automatically, so you don’t usually load magrittr explicitly. Pipes are a powerful tool for clearly expressing a sequence of multiple operations. For example, the pipe operator can take this sequence of operations: df1 &lt;- filter(penguins, island == &quot;Dream&quot;) df2 &lt;- mutate(df1, flipper_length_cm = flipper_length_mm/10) df3 &lt;- select(df2, species, year, flipper_length_cm) print(df3) And turn it into this, removing the need to create intermediate variables penguins %&gt;% filter(island == &quot;Dream&quot;) %&gt;% mutate(flipper_length_cm = flipper_length_mm/10) %&gt;% select(species, year, flipper_length_cm) You can read it as a series of imperative statements: filter, then mutate, then select. A good way to pronounce %&gt;% when reading code is “then”. It takes the output of the operation to the left of %&gt;% and feeds it into the next function as the input. Say you want to summarize data by some specified group, for example you want to find the average body mass for each species, this is where the group_by() function comes into play. penguins %&gt;% group_by(species) %&gt;% summarise(body_mass_avg = mean(body_mass_g, na.rm = TRUE)) Or get a count of how many individuals were observed for each species each year penguins %&gt;% group_by(species, year) %&gt;% summarise(n_observations = n()) 4.1.1.2 Exercises Reorder the variables in penguins so that year is the first column followed by the rest (Hint: look into the use of everything()). Create a new column called ‘size_group’ where individuals with body mass greater than the overall average are called ‘large’ and those smaller are called ‘small’. Find out which year for each species were individuals on average the largest according to body mass. You want to filter data for years that are not in a vector of given years, but this code doesn’t work. Tweak it so that it does. (Yes, you could just filter year to equal 2007 in this case but there is a trouble-shooting lessons here). penguins %&gt;% filter(year !%in% c(2008, 2009)) 4.2 Visualize A huge part of data exploration includes data visualization to get quick snapshots of your data and reveal patterns you can’t see from starting a a data frame of numbers. Here we are going to walk through a very quick introduction to ggplot2, using some code examples from the palmerpenguins R package tutorial: https://allisonhorst.github.io/palmerpenguins/articles/intro.html. ggplot2 is perhaps the most popular data visualization package in the R language, and is also a part of the Tidyverse. One big difference about ggplot though is that it does not use the pipe %&gt;% operator like we just learned, but instead threads together arguments with + signs. The general structure for ggplots follows the template below. However note that you can also specify the aes() parameters withing ggplot() instead of your geom function, which you may see a lot of people do. The mappings include arguments such as the x and y variables from your data you want to use for the plot. The geom function is the type of plot you want to make, such as geom_point(), geom_bar(), etc, there are a lot to choose from. ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) If you plan on doing any statistical analysis on your data , one of the first things you are likely to do is explore the distribution of your variables. You can plot histograms with geom_histogram() ggplot(penguins) + geom_histogram(mapping = aes(x = flipper_length_mm)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 2 rows containing non-finite values (`stat_bin()`). This isn’t too informative, we want to see the distributions for each species. We can do that by coloring the bars by species # Histogram example: flipper length by species ggplot(penguins) + geom_histogram(aes(x = flipper_length_mm, fill = species), alpha = 0.5, position = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;darkorchid&quot;,&quot;cyan4&quot;)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 2 rows containing non-finite values (`stat_bin()`). Or we can use facet_wrap() to create a separate plot for each species ggplot(penguins) + geom_histogram(aes(x = flipper_length_mm, fill = species), alpha = 0.5, position = &quot;identity&quot;) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;darkorchid&quot;,&quot;cyan4&quot;)) + facet_wrap(~species) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ## Warning: Removed 2 rows containing non-finite values (`stat_bin()`). Lets make a quick bar plot showing the total count of each species studied on each island ggplot(penguins) + geom_bar(mapping = aes(x = island, fill = species)) As you may have already noticed, the beauty about ggplot2 is there are a million ways you can customize your plots. This example builds on our simple bar plot ggplot(penguins, aes(x = island, fill = species)) + geom_bar(alpha = 0.8) + scale_fill_manual(values = c(&quot;darkorange&quot;,&quot;purple&quot;,&quot;cyan4&quot;), guide = FALSE) + theme_minimal() + facet_wrap(~species, ncol = 1) + coord_flip() Now make a scatterplot showing the relationship between body mass and flipper length, coloring the point by species ggplot(penguins) + geom_point(mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species)) ## Warning: Removed 2 rows containing missing values (`geom_point()`). 4.2.1 Exercises Make a barplot showing the average flipper length for each species. Make a scatter plot of bill length compared to bill depth but only for observations on the Dream island. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
